#!/usr/bin/env python

import asuscharge
import asyncio
import configparser
import os
import sys

from dbus_next.aio import MessageBus
from dbus_next.constants import BusType
from dbus_next.service import ServiceInterface, dbus_property, method


DBUS_NAME = "ca.cforrester.AsusCharge.Daemon"
DBUS_PATH = "/ca/cforrester/AsusCharge"
DBUS_INTERFACE = "ca.cforrester.AsusCharge.Daemon"
VAR = "/var/lib/asuscharge_daemon/"
THRESHOLD_FILE = f"{VAR}charge_control_end_threshold"
CONFIG_FILE = f"{VAR}asuscharge_daemon.conf"
SECTION = "DEFAULT"
PERSIST_BETWEEN_REBOOTS = "PersistBetweenReboots"
PERSIST_BETWEEN_REBOOTS_DEFAULT = "yes"

DBUS_INT = "i"
DBUS_BOOL = "b"


class ChargeControlService(ServiceInterface):
    def __init__(self, name: str, config: configparser.ConfigParser):
        super().__init__(name)
        self.config = config
        self.charge_controller = asuscharge.ChargeThresholdController()
        if self.config[SECTION].getboolean(PERSIST_BETWEEN_REBOOTS):
            try:
                with open(THRESHOLD_FILE, "r") as f:
                    self.ChargeEndThreshold = int(f.read())
                    print(
                        f"Loaded saved charge threshold state: {self.ChargeEndThreshold}%"
                    )
                os.remove(THRESHOLD_FILE)
            except FileNotFoundError:
                print("Unable to find saved charge threshold state.")
                with open(THRESHOLD_FILE, "w") as f:
                    f.write(str(self.ChargeEndThreshold))
                    f.flush()
                    print(f"Saved charge threshold state: {self.ChargeEndThreshold}%")
        else:
            # Delete the saved threshold if it shouldn't exist.
            try:
                os.remove(THRESHOLD_FILE)
            except FileNotFoundError:
                pass

    @dbus_property()
    def ChargeEndThreshold(self) -> DBUS_INT:
        return self.charge_controller.end_threshold

    @ChargeEndThreshold.setter
    def ChargeEndThreshold(self, value: DBUS_INT) -> None:
        if self.charge_controller.end_threshold == value:
            return
        else:
            self.charge_controller.end_threshold = value
            if self.config[SECTION].getboolean(PERSIST_BETWEEN_REBOOTS):
                with open(THRESHOLD_FILE, "w") as f:
                    f.write(str(self.charge_controller.end_threshold))
                    f.flush()
            self.emit_properties_changed(
                {"ChargeEndThreshold": self.charge_controller.end_threshold}
            )

    @dbus_property()
    def PersistBetweenReboots(self) -> DBUS_BOOL:
        return self.config[SECTION].getboolean(PERSIST_BETWEEN_REBOOTS)

    @PersistBetweenReboots.setter
    def PersistBetweenReboots(self, value: DBUS_BOOL) -> None:
        if value == self.config[SECTION].getboolean(PERSIST_BETWEEN_REBOOTS):
            return
        elif value:
            self.config[SECTION][PERSIST_BETWEEN_REBOOTS] = "yes"
        else:
            self.config[SECTION][PERSIST_BETWEEN_REBOOTS] = "no"
            try:
                os.remove(THRESHOLD_FILE)
            except FileNotFoundError:
                pass
        with open(CONFIG_FILE, "w") as f:
            self.config.write(f)
            f.flush()
        self.emit_properties_changed(
            {
                "PersistBetweenReboots": self.config[SECTION].getboolean(
                    PERSIST_BETWEEN_REBOOTS
                ),
            }
        )


async def main():
    config = configparser.ConfigParser()
    config[SECTION][PERSIST_BETWEEN_REBOOTS] = PERSIST_BETWEEN_REBOOTS_DEFAULT
    if config.read(CONFIG_FILE) == []:
        print(f"Config file not found. Generating a default config to {CONFIG_FILE}")
        with open(CONFIG_FILE, "w") as f:
            config.write(f)
            f.flush()
    bus = await MessageBus(bus_type=BusType.SYSTEM).connect()
    interface = ChargeControlService(DBUS_INTERFACE, config)
    bus.export(DBUS_PATH, interface)
    await bus.request_name(DBUS_NAME)
    await bus.wait_for_disconnect()
    with open(CONFIG_FILE, "w") as f:
        config.write(f)
        f.flush()


if (
    not asuscharge.supported_platform()
    or not asuscharge.supported_kernel()
    or not asuscharge.module_loaded()
):
    print(
        f"{sys.argv[0]} is not supported on this system. Platform=Linux: {asuscharge.supported_platform()}. Kernel>=5.4: {asuscharge.supported_kernel()}. asus_nb_wmi module loaded: {asuscharge.module_loaded()}."
    )
    sys.exit(-1)

asyncio.get_event_loop().run_until_complete(main())
